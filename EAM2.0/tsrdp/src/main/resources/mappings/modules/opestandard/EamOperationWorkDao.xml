<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tiansu.eam.modules.opestandard.dao.EamOperationWorkDao">
    <sql id="columns">
        a.id AS 'id_key',
        a.operationwork_code,
        a.operationwork_content,
        a.operationwork_type,
        c.dict_name,
        a.operationwork_totaltime,
        a.approve_by,
        a.approve_reason,
        a.approve_time,
        a.approve_status,
        a.operationwork_status,
        a.create_by,
        a.create_time,
        a.update_by,
        a.update_time
    </sql>

    <sql id="columns1">
        a.id AS 'id_key',
        a.operationwork_code,
        a.operationwork_content,
        a.operationwork_type,
        a.operationwork_totaltime,
        a.approve_by,
        a.approve_reason,
        a.approve_time,
        a.approve_status,
        a.operationwork_status,
        a.create_by,
        a.create_time,
        a.update_by,
        a.update_time
    </sql>

    <sql id="operationWorkJoins">
        left join (select dict_value, dict_name from eam_dict where dict_type_code = 'operationwork_type') c
        on a.operationwork_type = c.dict_value
        left join eam_operationwork_device b on a.id = b.operationwork_id
        left join eam_device d on b.dev_id = d.id
    </sql>
    <sql id="operationWorkJoins1">
        left join (select dict_value, dict_name from eam_dict where dict_type_code = 'operationwork_type') c
        on a.operationwork_type = c.dict_value
    </sql>

    <select id="get" resultType="com.tiansu.eam.modules.opestandard.entity.OperationWork">
          select 
            <include refid="columns"/>
          from eam_operation_work a
            <include refid="operationWorkJoins1" />
          where id = #{id_key}
    </select>

    <select id="getEdit" resultType="java.util.Map">
        select distinct
        <include refid="columns"/>
        from eam_operation_work a
        <include refid="operationWorkJoins1" />
        where a.id = #{id}
    </select>

    <select id="getDevice" resultType="java.util.Map">
        select distinct
        a.operationwork_id,
        a.dev_id,
        b.dev_code,
        b.dev_name,
        b.dev_major
        from  eam_operationwork_device a,
              eam_device b
        where a.dev_id = b.id
          and a.operationwork_id = #{id}
        order by a.dev_id
    </select>

    <select id="getProcedure" resultType="java.util.Map">
        select
            a.id as "procedure_id",
            a.operationwork_id,
            a.procedure_code,
            a.procedure_desc,
            a.procedure_standard,
            a.procedure_remark
        from eam_operationwork_procedure a
        where operationwork_id = #{id}
        order by a.procedure_code
    </select>

    <select id="getSafety" resultType="java.util.Map">
        select
        id as "safety_id",
        operationwork_id,
        safety_code,
        safety_desc,
        safety_standard,
        safety_remark
        from eam_operationwork_safety a
        where operationwork_id = #{id}
        order by safety_code
    </select>

    <select id="getWorkTools" resultType="java.util.Map">
        select
            a.id as "tools_id",
            a.operationwork_id,
            a.material_id,
            b.material_code as "tools_code",
            b.material_name as "tools_name",
            b.material_unit,
            b.material_qty,
            b.material_model,
            a.tools_num,
            a.tools_remark
        from eam_operationwork_tools a
        join eam_material b on a.material_id = b.id
        where operationwork_id = #{id}
          and b.isdelete = '0'
          order by a.id
    </select>

    <select id="getSpareparts" resultType="java.util.Map">
        select
        a.id as "spareparts_id",
        a.operationwork_id,
        a.material_id,
        b.material_code as "spareparts_code",
        b.material_name as "spareparts_name",
        b.material_unit,
        b.material_qty,
        b.material_model,
        b.material_price,
        a.spareparts_num,
        a.spareparts_remark,
        a.spareparts_total
        from eam_operationwork_spareparts a
        join eam_material b on a.material_id = b.id
        where operationwork_id = #{id}
          and b.isdelete = '0'
          order by a.id
    </select>

    <select id="getPersonhours" resultType="java.util.Map">
        select
        a.id as "personhours_id",
        a.operationwork_id,
        a.loginname,
        b.realname,
        a.person_hours,
        a.person_hourprice,
        a.person_postskill,
        a.person_hourtotal,
        a.person_remark
        from eam_operationwork_person a
        join ioms_user b on a.loginname = b.loginname
        where operationwork_id = #{id}
        order by a.id
    </select>

    <select id="getOtherexpenses" resultType="java.util.Map">
        select
        a.id as "otherexpenses_id",
        a.operationwork_id,
        a.otherexpenses,
        a.otherexpenses_amount,
        a.otherexpenses_remark
        from eam_operationwork_others a
        where operationwork_id = #{id}
        order by a.id
    </select>

    <insert id="insert">
        insert into eam_operation_work(
            id,
            operationwork_code,
            operationwork_content,
            operationwork_type,
            operationwork_totaltime,
            operationwork_status,
            approve_status,
            create_by,
            create_time,
            update_by,
            update_time,
            isdelete,
            pstid
        ) VALUES (
            #{id_key},
            #{operationwork_code},
            #{operationwork_content},
            #{operationwork_type},
            #{operationwork_totaltime},
            #{operationwork_status},
            '0',
            #{createBy.loginname},
            #{createDate},
            #{createBy.loginname},
            #{createDate},
            #{isDelete},
            #{pstid}
        )
    </insert>

    <insert id="insertDevice">
        INSERT INTO eam_operationwork_device
        (id,operationwork_id,dev_id)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.dev_id})
        </foreach>
    </insert>

    <insert id="insertProcedure">
        INSERT INTO eam_operationwork_procedure
        (id,operationwork_id,procedure_code,procedure_desc,procedure_standard,procedure_remark)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.procedure_code},#{item.procedure_desc},#{item.procedure_standard},#{item.procedure_remark})
        </foreach>
    </insert>

    <insert id="insertSafety">
        INSERT INTO eam_operationwork_safety
        (id,operationwork_id,safety_code,safety_desc,safety_standard,safety_remark)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.safety_code},#{item.safety_desc},#{item.safety_standard},#{item.safety_remark})
        </foreach>
    </insert>

    <insert id="insertTools">
        INSERT INTO eam_operationwork_tools
        (id,operationwork_id,material_id,tools_num,tools_remark)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.material_id},#{item.tools_num},#{item.tools_remark})
        </foreach>
    </insert>

    <insert id="insertSpareparts">
        INSERT INTO eam_operationwork_spareparts
        (id,operationwork_id,material_id,spareparts_num,spareparts_remark,spareparts_total)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.material_id},#{item.spareparts_num},#{item.spareparts_remark},#{item.spareparts_total})
        </foreach>
    </insert>

    <insert id="insertPersonHours">
        INSERT INTO eam_operationwork_person
        (id,operationwork_id,loginname,person_hours,person_hourprice,person_postskill,person_hourtotal,person_remark)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.loginname},#{item.person_hours},#{item.person_hourprice},#{item.person_postskill},#{item.person_hourtotal},#{item.person_remark})
        </foreach>
    </insert>

    <insert id="insertOthers">
        INSERT INTO eam_operationwork_others
        (id,operationwork_id,otherexpenses,otherexpenses_amount,otherexpenses_remark)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.operationwork_id},#{item.otherexpenses},#{item.otherexpenses_amount},#{item.otherexpenses_remark})
        </foreach>
    </insert>

    <select id="findListByMap" resultType="java.util.Map">
        select * from
        (select distinct
        <include refid="columns"/>
        from eam_operation_work a
        <include refid="operationWorkJoins"/>
        where a.isdelete = '0'
        <if test="operationwork_code != null and operationwork_code != ''">
            AND a.operationwork_code like
            <if test="dbName == 'oracle'">'%'||#{operationwork_code}||'%'</if>
            <if test="dbName == 'mssql'">'%'+#{operationwork_code}+'%'</if>
            <if test="dbName == 'mysql'">CONCAT('%', #{operationwork_code}, '%')</if>
        </if>
        <if test="operationwork_content != null and operationwork_content != ''">
            AND a.operationwork_content LIKE
            <if test="dbName == 'oracle'">'%'||#{operationwork_content}||'%'</if>
            <if test="dbName == 'mssql'">'%'+#{operationwork_content}+'%'</if>
            <if test="dbName == 'mysql'">CONCAT('%', #{operationwork_content}, '%')</if>
        </if>
        <if test="device_name != null and device_name != ''">
            AND d.dev_name LIKE
            <if test="dbName == 'oracle'">'%'||#{device_name}||'%'</if>
            <if test="dbName == 'mssql'">'%'+#{device_name}+'%'</if>
            <if test="dbName == 'mysql'">CONCAT('%', #{device_name}, '%')</if>
        </if>

        <if test="operationwork_type != null and operationwork_type != ''">
            AND a.operationwork_type = #{operationwork_type}
        </if>
        <if test="approve_status != null and approve_status != ''">
            AND a.approve_status = #{approve_status}
        </if>
        ) res
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY res.${page.orderBy}
            </when>
            <otherwise>
                order by res.update_time desc
            </otherwise>
        </choose>
    </select>

    <!--通过编码获取-->
    <select id="getByCode" parameterType="String" resultType="Map">
        SELECT
        count(1) cou
        FROM
        eam_operation_work s
        WHERE operationwork_code = #{code} and isdelete = 0;
    </select>

    <select id="getTools" resultType="Map">
        select
          id as "material_id",
          material_code,
          material_name,
          material_unit,
          material_model,
          material_price
        from eam_material
        where isdelete = '0'

    </select>

    <!--逻辑删除-->
    <delete id="delete">
        update eam_operation_work set
        isdelete = '1',
        update_by = #{updateBy.loginname},
        update_time = #{updateDate}
        where id = #{id_key} and operationwork_status = '0'
    </delete>

    <!--编辑，主表是修改，子表是先删除后添加-->
    <update id="update">
        update eam_operation_work
        SET operationwork_content = #{operationwork_content},
            operationwork_type = #{operationwork_type},
            operationwork_totaltime = #{operationwork_totaltime},
            operationwork_status = #{operationwork_status},
            update_by = #{updateBy.loginname},
            update_time = #{updateDate}
        WHERE
        id = #{id_key}
    </update>

    <delete id="deleteDevice">
        DELETE FROM eam_operationwork_device where operationwork_id = #{operationwork_id}
    </delete>

    <delete id="deleteProcedure">
        DELETE FROM eam_operationwork_procedure where operationwork_id = #{operationwork_id}
    </delete>
    <delete id="deleteSafety">
        DELETE FROM eam_operationwork_safety where operationwork_id = #{operationwork_id}
    </delete>
    <delete id="deleteTools">
        DELETE FROM eam_operationwork_tools where operationwork_id = #{operationwork_id}
    </delete>
    <delete id="deleteSpareparts">
        DELETE FROM eam_operationwork_spareparts where operationwork_id = #{operationwork_id}
    </delete>
    <delete id="deletePersonhours">
        DELETE FROM eam_operationwork_person where operationwork_id = #{operationwork_id}
    </delete>
    <delete id="deleteOthers">
        DELETE FROM eam_operationwork_others where operationwork_id = #{operationwork_id}
    </delete>

    <select id="getAllCodes" parameterType="Map" resultType="Map">
            select DISTINCT id,operationwork_code as 'code'
            from  eam_operation_work
            where  isdelete = 0
            <if test="approve_status != null and approve_status != ''">
                and approve_status = #{approve_status}
            </if>
    </select>


    <!--导出-->
    <select id="findWorkListByMap" parameterType="Map" resultType="Map">
        SELECT
        <include refid="columns1"/>
        FROM
        eam_operation_work a
        <include refid="operationWorkJoins" />
        <where>
            a.isdelete=0
            <if test="ids != null and ids != ''">
                AND a.id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findProcedureByMap" parameterType="Map" resultType="Map">
        SELECT a.procedure_code,a.procedure_desc,a.procedure_standard,a.procedure_remark,a.id procedure_id, a.operationwork_id, b.operationwork_code
        FROM eam_operation_work b,eam_operationwork_procedure a
        <where>
            b.id = a.operationwork_id
            <if test="ids != null and ids != ''">
                AND a.operationwork_id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findSafetyByMap" parameterType="Map" resultType="Map">
        SELECT a.safety_code,a.safety_desc,a.safety_standard,a.safety_remark,a.id safety_id, a.operationwork_id, b.operationwork_code
        FROM eam_operation_work b,eam_operationwork_safety a
        <where>
            b.id = a.operationwork_id
            <if test="ids != null and ids != ''">
                AND a.operationwork_id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findToolsByMap" parameterType="Map" resultType="Map">
        SELECT a.id tools_id, a.material_id, a.operationwork_id, b.operationwork_code, c.material_name, a.tools_num, c.material_unit ,
        c.material_model, a.tools_remark, a.operationwork_id, b.operationwork_code
        FROM eam_operationwork_tools a,eam_operation_work b, eam_material c
        <where>
            a.operationwork_id = b.id and a.material_id = c.id
            <if test="ids != null and ids != ''">
                AND a.operationwork_id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findSparepartsByMap" parameterType="Map" resultType="Map">
        SELECT a.id spareparts_id, a.material_id, a.operationwork_id, b.operationwork_code, c.material_name, a.spareparts_num, c.material_unit ,
        c.material_price, a.spareparts_remark, a.spareparts_total, a.operationwork_id, b.operationwork_code
        FROM eam_operationwork_spareparts a,eam_operation_work b, eam_material c
        <where>
            a.operationwork_id = b.id and a.material_id = c.id
            <if test="ids != null and ids != ''">
                AND a.operationwork_id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findPersonHoursByMap" parameterType="Map" resultType="Map">
        SELECT a.id personHours_id, a.loginname, c.realname, a.person_hours, a.person_hourprice, a.person_postskill, a.person_hourtotal, a.person_remark,
        a.operationwork_id, b.operationwork_code
        FROM eam_operationwork_person a,eam_operation_work b, ioms_user c
        <where>
            a.operationwork_id = b.id and a.loginname = c.loginname
            <if test="ids != null and ids != ''">
                AND a.operationwork_id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>
    <select id="findOthersByMap" parameterType="Map" resultType="Map">
        SELECT a.id others_id,a.otherexpenses,a.otherexpenses_amount,a.otherexpenses_remark,a.operationwork_id, b.operationwork_code
        FROM eam_operationwork_others a,eam_operation_work b
        <where>
            a.operationwork_id = b.id
            <if test="ids != null and ids != ''">
                AND a.operationwork_id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getDeviceMajors" parameterType="Map" resultType="Map">
        SELECT DISTINCT a.dev_major,b.dict_name
        FROM eam_device a,
        (select dict_value, dict_name from eam_dict where dict_type_code = 'dev_major') b
        <where>
            a.dev_major = b.dict_value
            <if test="ids != null and ids != ''">
                AND a.id in
                <foreach item="ids" index="index" collection="ids" open="(" separator="," close=")">
                    #{ids}
                </foreach>
            </if>
        </where>
    </select>


    <select id="getOperaworkIdByPIid" parameterType="String" resultType="Map">
        SELECT id,operationwork_code,pstid
        FROM eam_operation_work
        WHERE pstid = #{pstid}
    </select>

    <!--工作流通过实例ID更新表单-->
    <update id="updateAprByPIid" parameterType="Map">
        UPDATE eam_operation_work
        SET approve_by = #{approve_by},
            approve_reason = #{approve_reason},
            approve_time = #{approve_time},
            approve_status = #{approve_status}
        where pstid = #{pstid}
    </update>

    <select id="findDevCategoryList" resultType="java.util.Map">
        select a.id, a.name, a.code, a.pid, a.baseid, a.type from
        (
        SELECT
        cat_id AS id,
        cat_name AS name,
        cat_code as code,
        cat_pid AS pid,
        id AS baseid,
        'devCategory' AS type
        FROM
        eam_dev_category a
        where isdelete = '0'
        UNION ALL
        SELECT
        id AS id,
        dev_name AS name,
        dev_code as code,
        dev_category AS pid,
        id AS baseid,
        'device' AS type
        FROM
        eam_device
        where isdelete = '0'
        ) a
        where not EXISTS
        (select 1 from eam_operationwork_device c
          where a.id = c.dev_id
        <if test="operationwork_id != null and operationwork_id != ''">
            and c.operationwork_id != #{operationwork_id}
        </if>
        )
        <if test="type != null and type != ''">
            AND a.type = #{type}
        </if>
        <if test="name != null and name != ''">
            AND a.name = #{name}
        </if>
    </select>
    <select id="getDevCategoryList" resultType="java.util.Map">
        select a.id, a.name, a.code, a.pid, a.baseid, a.type from
        (
        SELECT
        cat_id AS id,
        cat_name AS name,
        cat_code as code,
        cat_pid AS pid,
        id AS baseid,
        'devCategory' AS type
        FROM
        eam_dev_category a
        where isdelete = '0'
        UNION ALL
        SELECT
        id AS id,
        dev_name AS name,
        dev_code as code,
        dev_category AS pid,
        id AS baseid,
        'device' AS type
        FROM
        eam_device
        where isdelete = '0'
        ) a
    </select>
</mapper>


